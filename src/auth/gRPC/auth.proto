syntax = "proto3";


message LoginRequest {
    string login = 1;
    string password = 2;
    string user_agent = 3;

}

message LoginResponse {
    string access_token = 1;
    string refresh_token = 2;
    string expires_in = 3;
    string token_type = 4;
}

message LoginViaGoogleRequest {
    string access_token = 1;
    string social_id = 2;
    string social_name = 3;
    string email = 4;
    string user_agent = 5;
}

message LoginViaGoogleResponse {
    string access_token = 1;
    string refresh_token = 2;
    string expires_in = 3;
    string token_type = 4;
}

message RefreshTokenRequest {
    string refresh_token = 1;
    string user_agent = 2;
}

message RefreshTokenResponse {
    string access_token = 1;
    string refresh_token = 2;
    string expires_in = 3;
    string token_type = 4;
}

message LogoutRequest {
    string access_token = 1;
    string user_agent = 2;
}

message LogoutResponse {
}

message TestTokenRequest {
    string access_token = 1;
    string user_agent = 2;

}

message TestTokenResponse {
}

service Auth {
    rpc Login (LoginRequest) returns (LoginResponse);
    rpc RefreshToken (RefreshTokenRequest) returns (RefreshTokenResponse);
    rpc Logout (LogoutRequest) returns (LogoutResponse);
    rpc TestToken (TestTokenRequest) returns (TestTokenResponse);
    rpc LoginViaGoogle (LoginViaGoogleRequest) returns (LoginViaGoogleResponse);
}

message UserCreateRequest {
    string login = 1;
    string password = 2;
    string email = 3;
}

message UserResponse {
    string id = 1;
    string login = 2;
    string email = 3;
    repeated RoleResponse roles = 4;
}

message UserGetRequest {
    string access_token = 1;
    string user_agent = 2;

}

message UserGetListRequest {
    string access_token = 1;
    string user_agent = 2;
    int32 skip = 3;
    int32 limit = 4;
}
message UserGetListResponse {
    int32 skip = 1;
    int32 limit = 2;
    repeated UserResponse users = 3;
}

message UserUpdateEmailRequest {
    string access_token = 1;
    string user_agent = 2;
    string password = 3;
    string email = 4;
}

message UserDeleteMe {
    string access_token = 1;
    string user_agent = 2;
    string password = 3;
}

message UserUpdatePasswordRequest {
    string old_password = 1;
    string new_password = 2;
    string access_token = 3;
    string user_agent = 4;

}


message UserHistory {
    string date = 1;
    string user_agent = 2;
    string device_type = 3;
    bool active = 4;
}

message UserHistoryRequest {
    string access_token = 1;
    int32 skip = 2;
    int32 limit = 3;
    string user_agent = 4;

}

message UserHistoryResponse {
    repeated UserHistory rows = 2;
}

message UserAddRole{
    string access_token = 1;
    string user_agent = 2;
    string user_id = 3;
    int32 role_id = 4;
}

message UserRemoveRole {
    string access_token = 1;
    string user_agent = 2;
    string user_id = 3;
    int32 role_id = 4;
}

message RoleCreate {
    string access_token = 1;
    string user_agent = 2;
    string name = 3;
}

message RoleRemove {
    string access_token = 1;
    string user_agent = 2;
    int32 role_id = 3;
}
message RoleUpdate {
    string access_token = 1;
    string user_agent = 2;
    int32 role_id = 3;
    string name = 4;
}
message RoleResponse {
    int32 id = 1;
    string name = 2;
}
message RoleGetList {
    string access_token = 1;
    int32 skip = 2;
    int32 limit = 3;
    string user_agent = 4;
}
message RoleResponseList {
    repeated RoleResponse rows = 1;
}





service User {
    rpc Get (UserGetRequest) returns (UserResponse);
    rpc GetList (UserGetListRequest) returns (UserGetListResponse);
    rpc GetHistory (UserHistoryRequest) returns (UserHistoryResponse);
    rpc Create (UserCreateRequest) returns (UserResponse);
    rpc UpdateEmail (UserUpdateEmailRequest) returns (UserResponse);
    rpc UpdatePassword (UserUpdatePasswordRequest) returns (UserResponse);
    rpc DeleteMe (UserDeleteMe) returns (UserResponse);
    rpc addRole (UserAddRole) returns (UserResponse);
    rpc removeRole (UserRemoveRole) returns (UserResponse);
}

service Role {
    rpc Get (RoleGetList) returns (RoleResponseList);
    rpc Create (RoleCreate) returns (RoleResponse);
    rpc Delete (RoleRemove) returns (RoleResponse);
    rpc Update (RoleUpdate) returns (RoleResponse);
}